ALGORITHM valid_parentheses
VAR
   state_stack : CHAR;
   c : CHAR := ' ';
   stk : STACK;
   wrong : BOOLEAN := FALSE;
BEGIN
   WHILE (c <> '#' AND NOT wrong) DO
       Read(c);
       SWITCH (c) DO
           case '[':
           case '{':
           case '(': stk.push(c);
                           state_stack := stk.peek(); // peek do not affect the stack.
                           Write(state_stack);
                           BREAK;
           case ']': IF (stp.peek()='[') THEN
                               state_stack := stk.pop(); // pop do not affect the stack.
                               Write(state_stack);
                           ELSE
                               wrong := TRUE;
                           END_IF 
                           BREAK;
           case ')': IF (stp.peek()='(') THEN
                               state_stack := stk.pop(); // pop do not affect the stack.
                               Write(state_stack);
                           ELSE
                               wrong := TRUE;   
                           END_IF 
                           BREAK;
           case '}': IF (stp.peek()='{') THEN
                               state_stack := stk.pop(); // pop do not affect the stack.
                               Write(state_stack);
                           ELSE
                               wrong := TRUE;
                           END_IF 
                           BREAK;
                          
       END_SWITCH

      
   END_WHILE

   IF (stk.isEmpty() AND NOT wrong) THEN
       Write("Empty stack, so brackets match.");
   ELSE
       Write("Stack not empty, so brackets donâ€™t match.");
   END_IF
END